pub use random

pub resource tab_hash:array(count) = uninitialised_array(1)

# Generate the lookup table used for tabulation hashing
# Sets the lookup table on tab_hash
# The values depend on the RNG state random
pub def generate_lookup_table use !random, ?tab_hash {
    ?n_chunks = 8
    ?poss_vals = 256
    ?table_size = n_chunks * poss_vals
    ?tab_hash = uninitialised_array(table_size)
    for ?i in 0..table_size {
        !random(?n:count)
        unsafe_update(!tab_hash, i, n)
    }
}

# Hash a count
pub def hash(x:count, ?h_x:count) use tab_hash {
    !hash(x, 0:count, ?h_x)
}

# Hash a count with a bias/salt
pub def hash(x:count, bias:count, ?h_x:count) use tab_hash {
    ?h_x = 0:count
    ?table_size = tab_hash^length
    for ?i in 0..8 {
        # Cast to int since unsafe_get accepts int, not count
        ?last_8_bits = foreign lpvm cast(and(x, 255:count)):int
        ?idx = 256*i + last_8_bits + foreign lpvm cast(bias)
        ?h_x = xor(h_x, unsafe_get(tab_hash, idx % table_size))
        ?x = logical_bitshift(x, 8:count)
    }
}

# Hash an int
pub def hash(x:count, ?h_x:count) use tab_hash {
    !hash(x, 0:count, ?h_x)
}

# Hash an int with a bias/salt
pub def hash(x:int, bias:count, ?h_x:count) use tab_hash {
    ?h_x = 0:count
    ?table_size = tab_hash^length
    for ?i in 0..8 {
        # Cast to int since unsafe_get accepts int, not count
        ?last_8_bits = and(x, 255)
        ?idx = 256*i + last_8_bits + foreign lpvm cast(bias)
        ?h_x = xor(h_x, unsafe_get(tab_hash, idx % table_size))
        ?x = logical_bitshift(x, 8)
    }
}

# Hash a string
pub def hash(x:string, ?h_x:count) use tab_hash {
    !hash(x, 0:count, ?h_x)
}

# Hash a string with a bias/salt
pub def hash(x:string, bias:count, ?h_x: count) use tab_hash {
    ?h_x = 0:count
    ?table_size = tab_hash^length
    for ?i in 0..x^length; ?chr in x {
        ?idx = (256*(i % 8) + ord(chr) + foreign lpvm cast(bias) + i/8)
        ?h_x = xor(h_x, unsafe_get(tab_hash, idx % table_size))
    }
}

!set_random_seed(foreign c time(0))
!generate_lookup_table
